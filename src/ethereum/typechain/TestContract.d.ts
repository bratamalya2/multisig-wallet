/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TestContractInterface extends ethers.utils.Interface {
  functions: {
    "num()": FunctionFragment;
    "setNum(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "num", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setNum",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "num", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNum", data: BytesLike): Result;

  events: {
    "NumUpdated(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NumUpdated"): EventFragment;
}

export class TestContract extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TestContractInterface;

  functions: {
    num(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "num()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    setNum(
      _newNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setNum(uint256)"(
      _newNum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  num(overrides?: CallOverrides): Promise<BigNumber>;

  "num()"(overrides?: CallOverrides): Promise<BigNumber>;

  setNum(
    _newNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setNum(uint256)"(
    _newNum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    num(overrides?: CallOverrides): Promise<BigNumber>;

    "num()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNum(_newNum: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setNum(uint256)"(
      _newNum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    NumUpdated(numVal: null): EventFilter;
  };

  estimateGas: {
    num(overrides?: CallOverrides): Promise<BigNumber>;

    "num()"(overrides?: CallOverrides): Promise<BigNumber>;

    setNum(_newNum: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setNum(uint256)"(
      _newNum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    num(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "num()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setNum(
      _newNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setNum(uint256)"(
      _newNum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
